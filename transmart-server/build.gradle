dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.grails:grails-core"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.2.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.2.Final"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    // end of default Grails 3.2 deps

    compile "org.grails.plugins:spring-security-core:${springSecurityPluginVersion}"
    runtime "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile 'log4j:apache-log4j-extras:1.2.17'
    compile "commons-io:commons-io:2.5"
    compile "commons-fileupload:commons-fileupload:1.3.1"
    compile "org.apache.solr:solr-solrj:4.5.1"
    compile 'org.grails.plugins:mail:2.0.0'
    compile "org.grails.plugins:quartz:${quartzVersion}"
    // end of project specific deps

    // local gradle submodule deps
    compile project(':transmart-oauth')
    compile project(':transmart-rest-api')

    runtime project(':transmartApp')
}

assets {
    packagePlugin = true
}

if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    task pathingJarTmServer(type: Jar) {
        dependsOn configurations.runtime
        appendix = 'pathing'

        doFirst {
            manifest {
                attributes 'Class-Path': configurations.runtime.files.collect {
                    it.toURL().toString().replaceFirst(/file:\/+/, '/').replaceAll(' ', '%20')
                }.join(' ')
            }
        }
    }

    bootRun {
        dependsOn pathingJarTmServer
        doFirst {
            classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJarTmServer.archivePath)
        }

        jvmArgs = ['-Xmx4096m']

        // In development mode, set the TRANSMART_DEBUG_PORT environment variable to a port number to enable debugging on that port
        if(! (System.env.TRANSMART_DEBUG_PORT ?: '').empty) {
            def port = System.env.TRANSMART_DEBUG_PORT
            assert port.isInteger() && (port as int) in 0..<2**16, "TRANSMART_DEBUG_PORT environment variable is not a valid port number: '$port'"
            jvmArgs += ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$port"]
        }
    }
} else {
    bootRun {
        jvmArgs = ['-Xmx4096m']

        // In development mode, set the TRANSMART_DEBUG_PORT environment variable to a port number to enable debugging on that port
        if(! (System.env.TRANSMART_DEBUG_PORT ?: '').empty) {
            def port = System.env.TRANSMART_DEBUG_PORT
            assert port.isInteger() && (port as int) in 0..<2**16, "TRANSMART_DEBUG_PORT environment variable is not a valid port number: '$port'"
            jvmArgs += ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$port"]
        }
    }
}

task executableWar(type: Copy) {
    from "${libsDir}/${project.name}-${project.version}.war"
    into "${distsDir}"
}
executableWar.dependsOn 'bootRepackage'

war {
    webInf {
        with copySpec({
            from '../Rmodules/src/main/resources/Rscripts'
            into 'Rscripts'
        })
        with copySpec({
            from '../transmartApp/src/main/resources/dataExportRScripts'
            into 'dataExportRScripts'
        })
        with copySpec({
            from '../open-api'
            into 'classes/public/open-api'
        })
        with copySpec({
            from 'src/main/resources/public'
            into 'classes/public'
        })
        with copySpec({
            from '../Rmodules/src/main/resources/public'
            into 'classes/public'
        })
    } //Rscripts from Rmodules into WEB-INF dir.
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact file("${distsDir}/${project.name}-${project.version}.war") // Publish the output of the executableWar task
        }
    }
}
publishToMavenLocal.dependsOn 'executableWar'
publish.dependsOn 'executableWar'
